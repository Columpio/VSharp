METHOD: System.Void VSharp.Test.Tests.ClassesSimplePropertyAccess.TestProperty1()
RESULT: <VOID>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.Test.Tests.ClassesSimplePropertyAccess[
	| VSharp.Test.Tests.ClassesSimplePropertyAccess.<SecretProperty>k__BackingField ~> (HeapRef 2.2)
	| VSharp.Test.Tests.ClassesSimplePropertyAccess._structProperty ~> STRUCT VSharp.Test.Tests.ClassesSimplePropertyAccess+SimpleStruct[
		| VSharp.Test.Tests.ClassesSimplePropertyAccess+SimpleStruct.X ~> 0]]
2.2 ==> STRUCT TypeVariable{2.2}{System.Collections.Generic.List`1[System.Boolean]}[
	| System.Collections.Generic.List`1._items ~> UNION[
		| !hasKey#5 ~> (HeapRef 2.3)
		| hasKey#4 ~> (HeapRef System.Collections.Generic.List`1.s_emptyArray)]
	| System.Collections.Generic.List`1._size ~> 0
	| System.Collections.Generic.List`1._syncRoot ~> null
	| System.Collections.Generic.List`1._version ~> 0]
2.3 ==> System.Boolean: [| ... 0 ... |]
---------- s1 = ----------
System.Collections.Generic.List`1[System.Boolean] ==> STRUCT System.Collections.Generic.List`1[System.Boolean][
	| System.Collections.Generic.List`1.DefaultCapacity ~> UNION[
		| !hasKey#13 ~> 4
		| hasKey#12 ~> System.Collections.Generic.List`1.DefaultCapacity]
	| System.Collections.Generic.List`1.s_emptyArray ~> UNION[
		| !hasKey#9 ~> (HeapRef 2.3)
		| hasKey#8 ~> (HeapRef System.Collections.Generic.List`1.s_emptyArray)]]
VSharp.Test.Tests.ClassesSimplePropertyAccess+SimpleStruct ==> STRUCT VSharp.Test.Tests.ClassesSimplePropertyAccess+SimpleStruct[]
VSharp.Test.Tests.ClassesSimplePropertyAccess ==> STRUCT VSharp.Test.Tests.ClassesSimplePropertyAccess[]

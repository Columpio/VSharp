METHOD: System.Void VSharp.Test.Tests.ListWorking.ContainsDecreasingOne(System.Int32)
RESULT: <VOID>
HEAP:
{ heap = merge[
	(UNION[], { heap = <empty>, statics = merge[
	(n <= 0, s0),
	(!(n <= 0), write({ heap = <empty>, statics = s0 } ⚪ recapp(CreateDecreasingList), s1))] } ⚪ recapp(Contains)),
	(!(1 == n) & !(n <= 0), { heap = write({ heap = <empty>, statics = s0 } ⚪ recapp(CreateDecreasingList), h2), statics = merge[
	(n <= 0, s0),
	(!(n <= 0), write({ heap = <empty>, statics = s0 } ⚪ recapp(CreateDecreasingList), s1))] } ⚪ recapp(Contains)),
	(!(n <= 0) & 1 == n, write({ heap = <empty>, statics = s0 } ⚪ recapp(CreateDecreasingList), h2)),
	(UNION[], <empty>)], statics = merge[
	(!(1 == n) & !(n <= 0), { heap = merge[
	(n <= 0, <empty>),
	(!(n <= 0), write({ heap = <empty>, statics = s0 } ⚪ recapp(CreateDecreasingList), h2))], statics = write({ heap = <empty>, statics = s0 } ⚪ recapp(CreateDecreasingList), s1) } ⚪ recapp(Contains)),
	(!(n <= 0) & 1 == n, write({ heap = <empty>, statics = s0 } ⚪ recapp(CreateDecreasingList), s1)),
	(n <= 0, s0)] } where
---------- s0 = ----------
VSharp.Test.Tests.ListWorking ==> STRUCT VSharp.Test.Tests.ListWorking[]
VSharp.Test.Tests.SharedList ==> STRUCT VSharp.Test.Tests.SharedList[]
---------- s1 = ----------
System.Object ==> STRUCT System.Object[]
---------- h2 = ----------
1.2 ==> STRUCT VSharp.Test.Tests.ListNode[
	| VSharp.Test.Tests.ListNode.Key ~> n
	| VSharp.Test.Tests.ListNode.Next ~> (HeapRef μ[CreateDecreasingList]_1)]

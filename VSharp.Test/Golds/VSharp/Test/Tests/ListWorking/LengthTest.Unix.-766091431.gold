METHOD: System.Void VSharp.Test.Tests.ListWorking.LengthTest(VSharp.Test.Tests.ListNode)
RESULT: <VOID>
HEAP:
{ heap = merge[
	(!(0 == l.VSharp.Test.Tests.ListNode.Next) & 0 == l, { heap = <empty>, statics = merge[
	(!(0 == l) & !(0 == l), write({ heap = <empty>, statics = s0 } ⚪ recapp(Length), s1)),
	(!(0 == l) & 0 == l, write({ heap = <empty>, statics = s0 } ⚪ recapp(Length), s2)),
	(0 == l, s3)] } ⚪ recapp(Length)),
	(!(0 == l) & !(0 == l.VSharp.Test.Tests.ListNode.Next), { heap = { heap = <empty>, statics = s0 } ⚪ recapp(Length), statics = merge[
	(!(0 == l) & !(0 == l), write({ heap = <empty>, statics = s0 } ⚪ recapp(Length), s1)),
	(!(0 == l) & 0 == l, write({ heap = <empty>, statics = s0 } ⚪ recapp(Length), s2)),
	(0 == l, s3)] } ⚪ recapp(Length)),
	(!(0 == l) & (!(0 == l) & 0 == l.VSharp.Test.Tests.ListNode.Next | 0 == l & 0 == l.VSharp.Test.Tests.ListNode.Next), { heap = <empty>, statics = s0 } ⚪ recapp(Length)),
	((!(0 == l) & 0 == l.VSharp.Test.Tests.ListNode.Next | 0 == l & 0 == l.VSharp.Test.Tests.ListNode.Next) & 0 == l, <empty>)], statics = merge[
	(!(0 == l) & !(0 == l) & !(0 == l.VSharp.Test.Tests.ListNode.Next), { heap = merge[
	(0 == l, <empty>),
	(!(0 == l), { heap = <empty>, statics = s0 } ⚪ recapp(Length))], statics = write({ heap = <empty>, statics = s0 } ⚪ recapp(Length), s1) } ⚪ recapp(Length)),
	(!(0 == l) & !(0 == l) & (!(0 == l) & 0 == l.VSharp.Test.Tests.ListNode.Next | 0 == l & 0 == l.VSharp.Test.Tests.ListNode.Next), write({ heap = <empty>, statics = s0 } ⚪ recapp(Length), s4)),
	(!(0 == l) & !(0 == l.VSharp.Test.Tests.ListNode.Next) & 0 == l, { heap = merge[
	(0 == l, <empty>),
	(!(0 == l), { heap = <empty>, statics = s0 } ⚪ recapp(Length))], statics = write({ heap = <empty>, statics = s0 } ⚪ recapp(Length), s2) } ⚪ recapp(Length)),
	(!(0 == l) & (!(0 == l) & 0 == l.VSharp.Test.Tests.ListNode.Next | 0 == l & 0 == l.VSharp.Test.Tests.ListNode.Next) & 0 == l, write({ heap = <empty>, statics = s0 } ⚪ recapp(Length), s2)),
	(!(0 == l.VSharp.Test.Tests.ListNode.Next) & 0 == l, { heap = merge[
	(0 == l, <empty>),
	(!(0 == l), { heap = <empty>, statics = s0 } ⚪ recapp(Length))], statics = s3 } ⚪ recapp(Length)),
	((!(0 == l) & 0 == l.VSharp.Test.Tests.ListNode.Next | 0 == l & 0 == l.VSharp.Test.Tests.ListNode.Next) & 0 == l, s3)] } where
---------- s0 = ----------
VSharp.Test.Tests.ListWorking ==> STRUCT VSharp.Test.Tests.ListWorking[]
VSharp.Test.Tests.SharedList ==> STRUCT VSharp.Test.Tests.SharedList[]
---------- s1 = ----------
VSharp.Test.Tests.ListNode ==> STRUCT VSharp.Test.Tests.ListNode[]
VSharp.Test.Tests.SharedList ==> STRUCT VSharp.Test.Tests.SharedList[]
---------- s2 = ----------
VSharp.Test.Tests.ListNode ==> STRUCT VSharp.Test.Tests.ListNode[]
---------- s3 = ----------
VSharp.Test.Tests.ListNode ==> STRUCT VSharp.Test.Tests.ListNode[]
VSharp.Test.Tests.ListWorking ==> STRUCT VSharp.Test.Tests.ListWorking[]
VSharp.Test.Tests.SharedList ==> STRUCT VSharp.Test.Tests.SharedList[]
---------- s4 = ----------
VSharp.Test.Tests.SharedList ==> STRUCT VSharp.Test.Tests.SharedList[]

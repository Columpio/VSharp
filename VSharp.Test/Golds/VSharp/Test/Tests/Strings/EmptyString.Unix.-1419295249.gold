METHOD: System.String VSharp.Test.Tests.Strings.EmptyString(System.Int32, System.Int32)
RESULT: UNION[
	| !hasKey#1 ~> null
	| hasKey#1 ~> (HeapRef System.String.Empty)]
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
System.String ==> STRUCT System.String[
	| System.String.Empty ~> UNION[
		| !hasKey#1 ~> null
		| hasKey#1 ~> (HeapRef System.String.Empty)]
	| System.String.PROBABILISTICMAP_BLOCK_INDEX_MASK ~> UNION[
		| !hasKey#1 ~> 7
		| hasKey#1 ~> System.String.PROBABILISTICMAP_BLOCK_INDEX_MASK]
	| System.String.PROBABILISTICMAP_BLOCK_INDEX_SHIFT ~> UNION[
		| !hasKey#1 ~> 3
		| hasKey#1 ~> System.String.PROBABILISTICMAP_BLOCK_INDEX_SHIFT]
	| System.String.PROBABILISTICMAP_SIZE ~> UNION[
		| !hasKey#1 ~> 8
		| hasKey#1 ~> System.String.PROBABILISTICMAP_SIZE]
	| System.String.StackallocIntBufferSizeLimit ~> UNION[
		| !hasKey#1 ~> 128
		| hasKey#1 ~> System.String.StackallocIntBufferSizeLimit]]
VSharp.Test.Tests.Strings ==> STRUCT VSharp.Test.Tests.Strings[]

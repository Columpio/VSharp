METHOD: System.String VSharp.Test.Tests.Strings.ConcreteIsInterned()
RESULT: (HeapRef interned)
HEAP:
{ heap = h0, statics = s1, pool = p2 } where
---------- h0 = ----------
 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: '\000';
		 ... 1 ... |]
	| System.String.m_StringLength ~> 0]
TargetFrameworkName ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'T';
		10: 'e';
		11: 'w';
		12: 'o';
		13: 'r';
		14: 'k';
		15: 'N';
		16: 'a';
		17: 'm';
		18: 'e';
		19: '\000';
		1: 'a';
		2: 'r';
		3: 'g';
		4: 'e';
		5: 't';
		6: 'F';
		7: 'r';
		8: 'a';
		9: 'm';
		 ... 20 ... |]
	| System.String.m_StringLength ~> 19]
interned ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'i';
		1: 'n';
		2: 't';
		3: 'e';
		4: 'r';
		5: 'n';
		6: 'e';
		7: 'd';
		8: '\000';
		 ... 9 ... |]
	| System.String.m_StringLength ~> 8]
str ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		1: 't';
		2: 'r';
		3: '\000';
		 ... 4 ... |]
	| System.String.m_StringLength ~> 3]
---------- s1 = ----------
System.AppDomain ==> STRUCT System.AppDomain[
	| System.AppDomain.DefaultADID ~> UNION[
		| !hasKey#2 ~> 1
		| hasKey#2 ~> System.AppDomain.DefaultADID]
	| System.AppDomain.TargetFrameworkNameAppCompatSetting ~> UNION[
		| !hasKey#2 ~> (HeapRef TargetFrameworkName)
		| hasKey#2 ~> (HeapRef System.AppDomain.TargetFrameworkNameAppCompatSetting)]
	| System.AppDomain.s_flags ~> UNION[
		| !hasKey#2 ~> 0
		| hasKey#2 ~> System.AppDomain.s_flags]]
System.String ==> STRUCT System.String[
	| System.String.Empty ~> UNION[
		| !hasKey#1 ~> (HeapRef )
		| hasKey#1 ~> (HeapRef System.String.Empty)]
	| System.String.TrimBoth ~> UNION[
		| !hasKey#1 ~> 2
		| hasKey#1 ~> System.String.TrimBoth]
	| System.String.TrimHead ~> UNION[
		| !hasKey#1 ~> 0
		| hasKey#1 ~> System.String.TrimHead]
	| System.String.TrimTail ~> UNION[
		| !hasKey#1 ~> 1
		| hasKey#1 ~> System.String.TrimTail]
	| System.String.alignConst ~> UNION[
		| !hasKey#1 ~> 3
		| hasKey#1 ~> System.String.alignConst]
	| System.String.charPtrAlignConst ~> UNION[
		| !hasKey#1 ~> 1
		| hasKey#1 ~> System.String.charPtrAlignConst]]
System.Threading.Thread ==> STRUCT System.Threading.Thread[
	| System.Threading.Thread.s_LocalDataStore ~> UNION[
		| !hasKey#3 ~> null
		| hasKey#3 ~> (HeapRef System.Threading.Thread.s_LocalDataStore)]
	| System.Threading.Thread.s_LocalDataStoreMgr ~> UNION[
		| !hasKey#3 ~> null
		| hasKey#3 ~> (HeapRef System.Threading.Thread.s_LocalDataStoreMgr)]
	| System.Threading.Thread.s_asyncLocalCurrentCulture ~> UNION[
		| !hasKey#3 ~> null
		| hasKey#3 ~> (HeapRef System.Threading.Thread.s_asyncLocalCurrentCulture)]
	| System.Threading.Thread.s_asyncLocalCurrentUICulture ~> UNION[
		| !hasKey#3 ~> null
		| hasKey#3 ~> (HeapRef System.Threading.Thread.s_asyncLocalCurrentUICulture)]]
VSharp.Test.Tests.Strings ==> STRUCT VSharp.Test.Tests.Strings[]
---------- p2 = ----------
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'T';
		10: 'e';
		11: 'w';
		12: 'o';
		13: 'r';
		14: 'k';
		15: 'N';
		16: 'a';
		17: 'm';
		18: 'e';
		19: '\000';
		1: 'a';
		2: 'r';
		3: 'g';
		4: 'e';
		5: 't';
		6: 'F';
		7: 'r';
		8: 'a';
		9: 'm';
		 ... 20 ... |]
	| System.String.m_StringLength ~> 19] ==> (HeapRef TargetFrameworkName)
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: '\000';
		 ... 1 ... |]
	| System.String.m_StringLength ~> 0] ==> (HeapRef )
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'i';
		1: 'n';
		2: 't';
		3: 'e';
		4: 'r';
		5: 'n';
		6: 'e';
		7: 'd';
		8: '\000';
		 ... 9 ... |]
	| System.String.m_StringLength ~> 8] ==> (HeapRef interned)
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		1: 't';
		2: 'r';
		3: '\000';
		 ... 4 ... |]
	| System.String.m_StringLength ~> 3] ==> (HeapRef str)

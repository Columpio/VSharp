METHOD: System.String VSharp.Test.Tests.Strings.ConcreteIsInterned()
RESULT: (HeapRef interned)
HEAP:
{ heap = h0, statics = s1, pool = p2 } where
---------- h0 = ----------
 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: '\000';
		 ... 1 ... |]
	| System.String.m_StringLength ~> 0]
interned ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'i';
		1: 'n';
		2: 't';
		3: 'e';
		4: 'r';
		5: 'n';
		6: 'e';
		7: 'd';
		8: '\000';
		 ... 9 ... |]
	| System.String.m_StringLength ~> 8]
str ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		1: 't';
		2: 'r';
		3: '\000';
		 ... 4 ... |]
	| System.String.m_StringLength ~> 3]
---------- s1 = ----------
System.String ==> STRUCT System.String[
	| System.String.Empty ~> UNION[
		| !hasKey#1 ~> (HeapRef )
		| hasKey#1 ~> (HeapRef System.String.Empty)]
	| System.String.PROBABILISTICMAP_BLOCK_INDEX_MASK ~> UNION[
		| !hasKey#1 ~> 7
		| hasKey#1 ~> System.String.PROBABILISTICMAP_BLOCK_INDEX_MASK]
	| System.String.PROBABILISTICMAP_BLOCK_INDEX_SHIFT ~> UNION[
		| !hasKey#1 ~> 3
		| hasKey#1 ~> System.String.PROBABILISTICMAP_BLOCK_INDEX_SHIFT]
	| System.String.PROBABILISTICMAP_SIZE ~> UNION[
		| !hasKey#1 ~> 8
		| hasKey#1 ~> System.String.PROBABILISTICMAP_SIZE]
	| System.String.StackallocIntBufferSizeLimit ~> UNION[
		| !hasKey#1 ~> 128
		| hasKey#1 ~> System.String.StackallocIntBufferSizeLimit]]
VSharp.Test.Tests.Strings ==> STRUCT VSharp.Test.Tests.Strings[]
---------- p2 = ----------
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: '\000';
		 ... 1 ... |]
	| System.String.m_StringLength ~> 0] ==> (HeapRef )
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'i';
		1: 'n';
		2: 't';
		3: 'e';
		4: 'r';
		5: 'n';
		6: 'e';
		7: 'd';
		8: '\000';
		 ... 9 ... |]
	| System.String.m_StringLength ~> 8] ==> (HeapRef interned)
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		1: 't';
		2: 'r';
		3: '\000';
		 ... 4 ... |]
	| System.String.m_StringLength ~> 3] ==> (HeapRef str)

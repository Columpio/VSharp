METHOD: System.Collections.Generic.LinkedList`1[System.Int32] VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z].RetDictionary()
RESULT: (HeapRef 1)
HEAP:
{ heap = h0, statics = s1, pool = p2 } where
---------- h0 = ----------
1 ==> STRUCT System.Collections.Generic.LinkedList`1[System.Int32][
	| System.Collections.Generic.LinkedList`1._siInfo ~> null
	| System.Collections.Generic.LinkedList`1._syncRoot ~> null
	| System.Collections.Generic.LinkedList`1.count ~> 0
	| System.Collections.Generic.LinkedList`1.head ~> null
	| System.Collections.Generic.LinkedList`1.version ~> 0]
Count ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		1: 'o';
		2: 'u';
		3: 'n';
		4: 't';
		5: '\000';
		 ... 6 ... |]
	| System.String.m_StringLength ~> 5]
Data ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'D';
		1: 'a';
		2: 't';
		3: 'a';
		4: '\000';
		 ... 5 ... |]
	| System.String.m_StringLength ~> 4]
Version ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'V';
		1: 'e';
		2: 'r';
		3: 's';
		4: 'i';
		5: 'o';
		6: 'n';
		7: '\000';
		 ... 8 ... |]
	| System.String.m_StringLength ~> 7]
---------- s1 = ----------
System.Collections.Generic.LinkedList`1[System.Int32] ==> UNION[
	| !(System.Collections.Generic.LinkedList`1[System.Int32] <: VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z]) | !(VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z] <: System.Collections.Generic.LinkedList`1[System.Int32]) | !hasKey#1 ~> STRUCT System.Collections.Generic.LinkedList`1[System.Int32][
		| System.Collections.Generic.LinkedList`1.CountName ~> UNION[
			| !hasKey#1 ~> (HeapRef Count)
			| (!(System.Collections.Generic.LinkedList`1[System.Int32] <: VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z]) | !(VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z] <: System.Collections.Generic.LinkedList`1[System.Int32])) & hasKey#1 ~> (HeapRef System.Collections.Generic.LinkedList`1.CountName)]
		| System.Collections.Generic.LinkedList`1.ValuesName ~> UNION[
			| !hasKey#1 ~> (HeapRef Data)
			| (!(System.Collections.Generic.LinkedList`1[System.Int32] <: VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z]) | !(VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z] <: System.Collections.Generic.LinkedList`1[System.Int32])) & hasKey#1 ~> (HeapRef System.Collections.Generic.LinkedList`1.ValuesName)]
		| System.Collections.Generic.LinkedList`1.VersionName ~> UNION[
			| !hasKey#1 ~> (HeapRef Version)
			| (!(System.Collections.Generic.LinkedList`1[System.Int32] <: VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z]) | !(VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z] <: System.Collections.Generic.LinkedList`1[System.Int32])) & hasKey#1 ~> (HeapRef System.Collections.Generic.LinkedList`1.VersionName)]]
	| (System.Collections.Generic.LinkedList`1[System.Int32] <: VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z]) & (VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z] <: System.Collections.Generic.LinkedList`1[System.Int32]) & hasKey#1 ~> STRUCT VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z][]]
System.Object ==> UNION[
	| !(System.Object <: VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z]) | !hasKey#2 ~> STRUCT System.Object[]
	| (System.Object <: VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z]) & hasKey#2 ~> STRUCT VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z][]]
VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z] ==> STRUCT VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z][]
---------- p2 = ----------
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		1: 'o';
		2: 'u';
		3: 'n';
		4: 't';
		5: '\000';
		 ... 6 ... |]
	| System.String.m_StringLength ~> 5] ==> (HeapRef Count)
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'D';
		1: 'a';
		2: 't';
		3: 'a';
		4: '\000';
		 ... 5 ... |]
	| System.String.m_StringLength ~> 4] ==> (HeapRef Data)
STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'V';
		1: 'e';
		2: 'r';
		3: 's';
		4: 'i';
		5: 'o';
		6: 'n';
		7: '\000';
		 ... 8 ... |]
	| System.String.m_StringLength ~> 7] ==> (HeapRef Version)

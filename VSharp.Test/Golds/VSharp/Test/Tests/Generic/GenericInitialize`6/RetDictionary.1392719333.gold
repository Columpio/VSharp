METHOD: System.Collections.Generic.LinkedList`1[System.Int32] VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z].RetDictionary()
RESULT: (HeapRef 4)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> System.String CLASS [
	| System::String::m_FirstChar ~> [| 0 ~> 'V'; 1 ~> 'e'; 2 ~> 'r'; 3 ~> 's'; 4 ~> 'i'; 5 ~> 'o'; 6 ~> 'n'; 7 ~> '\000' ... 8 ... |]
	| System::String::m_StringLength ~> 7]
2 ==> System.String CLASS [
	| System::String::m_FirstChar ~> [| 0 ~> 'C'; 1 ~> 'o'; 2 ~> 'u'; 3 ~> 'n'; 4 ~> 't'; 5 ~> '\000' ... 6 ... |]
	| System::String::m_StringLength ~> 5]
3 ==> System.String CLASS [
	| System::String::m_FirstChar ~> [| 0 ~> 'D'; 1 ~> 'a'; 2 ~> 't'; 3 ~> 'a'; 4 ~> '\000' ... 5 ... |]
	| System::String::m_StringLength ~> 4]
4 ==> System.Collections.Generic.LinkedList`1[System.Int32] CLASS [
	| System::Collections::Generic::LinkedList`1::_siInfo ~> null
	| System::Collections::Generic::LinkedList`1::_syncRoot ~> null
	| System::Collections::Generic::LinkedList`1::count ~> 0
	| System::Collections::Generic::LinkedList`1::head ~> null
	| System::Collections::Generic::LinkedList`1::version ~> 0]
---------- s1 = ----------
System.Collections.Generic.LinkedList`1[System.Int32] ==> CLASS [
	| CountName ~> UNION[
		| !hasKey#1 ~> (HeapRef 2)
		| hasKey#1 ~> (HeapRef System.Collections.Generic.LinkedList`1[System.Int32].CountName)]
	| ValuesName ~> UNION[
		| !hasKey#1 ~> (HeapRef 3)
		| hasKey#1 ~> (HeapRef System.Collections.Generic.LinkedList`1[System.Int32].ValuesName)]
	| VersionName ~> UNION[
		| !hasKey#1 ~> (HeapRef 1)
		| hasKey#1 ~> (HeapRef System.Collections.Generic.LinkedList`1[System.Int32].VersionName)]]
System.Object ==> CLASS []
VSharp.Test.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z] ==> CLASS []
